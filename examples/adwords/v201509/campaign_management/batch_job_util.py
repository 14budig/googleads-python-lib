#!/usr/bin/python
#
# Copyright 2015 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utility for use with BatchJobService.

Api: AdWordsOnly
"""


import re
import urllib2
from xml.etree import ElementTree


class BatchJobHelper(object):
  """A utility that simplifies working with the BatchJobService."""

  _VERSION = 'v201509'
  _ADWORDS_ENDPOINT = ('https://adwords.google.com/api/adwords/cm/%s' %
                       _VERSION)
  _ADWORDS_NAMESPACE = ('{%s}' % _ADWORDS_ENDPOINT)
  # Used to remove namespace from xsi:type Element attributes.
  _ATTRIB_NAMESPACE_SUB = re.compile('ns[0-1]:')
  # Used to remove the AdWords namespace from Element tags.
  _TAG_NAMESPACE_SUB = re.compile(_ADWORDS_NAMESPACE)

  def __init__(self, client):
    """Initializes the BatchJobHelper.

    Args:
      client: an initialized AdWordsClient.
    """
    self.client = client

  def UploadBatchJobOperations(self, upload_url, *operations):
    """Uploads operations to the given uploadUrl.

    Args:
      upload_url: The url the given operations will be uploaded to.
      *operations: The operations being uploaded, provided as strings containing
        only the operations tags and their contents.
    """
    request_body = (
        '<?xml version="1.0" encoding="UTF-8"?><mutate '
        'xmlns="%s" '
        'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">%s</mutate>'
        % (self._ADWORDS_ENDPOINT, ''.join([operation
                                            for operation in operations])))

    req = urllib2.Request(upload_url)
    req.add_header('Content-Type', 'application/xml')
    urllib2.urlopen(req, data=request_body)

  def GenerateRawRequestXML(self, operations, service):
    """Generates the raw XML for the operations sent to the given service.

    Args:
      operations: a list containing operations that could be run by the given
        service.
      service: a str identifying the name of the service that the operations
        would ordinarily be run against.

    Returns:
      A str containing the raw XML of the request to the given service that
      would execute the given operations.
    """
    service = self.client.GetService(service, 'v201509')
    service.suds_client.set_options(nosend=True)
    service_request = service.mutate(operations).envelope
    service.suds_client.set_options(nosend=False)
    return service_request

  def ExtractOperations(self, full_soap_xml):
    """Extracts operations from API Request XML for use with BatchJobService.

    Args:
      full_soap_xml: The full XML for the desired operation, as generated by
        suds.

    Returns:
      A string containing only the operations portion of the full XML request,
      formatted for use with the BatchJobService. If no operations are found,
      returns an empty string.

    Raises:
      ValueError: If no Operation.Type element is found in the operations. This
        ordinarily happens if no xsi_type is specified for the operations.
    """
    # Extract mutate element from XML
    mutate = BatchJobHelper._GetRawOperationsFromXML(self, full_soap_xml)

    if mutate is not None:
      # Ensure operations are formatted correctly for BatchJobService.
      for operations in mutate:
        self._FormatForBatchJobService(operations)
        # Extract the operation type, ensure xsi:type is set for
        # BatchJobService.
        operation_type = operations.find('Operation.Type')

        if operation_type is None:
          raise ValueError('No xsi_type specified for the operations.')

        operations.attrib['xsi:type'] = operation_type.text
      operations_xml = ''.join([ElementTree.tostring(operations)
                                for operations in mutate])
      return operations_xml
    else:
      return ''

  def _FormatForBatchJobService(self, element):
    """Formats contents of all operations for use with the BatchJobService.

    This will recursively remove unnecessary namespaces generated by suds that
    would prevent the operations from executing via the BatchJobService. It will
    also remove namespaces appended to the xsi:type in some cases that also
    cause issues for the BatchJobService.

    Args:
      element: a starting Element to be modified to the correct format.
    """
    # Remove any unnecessary AdWords namespace from the tag.
    element.tag = self._TAG_NAMESPACE_SUB.sub('', element.tag)
    xsi_type = element.attrib.get(
        '{http://www.w3.org/2001/XMLSchema-instance}type')
    # If an xsi_type attribute exists, ensure that the namespace is removed from
    # the type.
    if xsi_type:
      element.attrib['{http://www.w3.org/2001/XMLSchema-instance}type'] = (
          self._ATTRIB_NAMESPACE_SUB.sub('', xsi_type))
    for child in element:
      self._FormatForBatchJobService(child)

  def _GetRawOperationsFromXML(self, raw_request_xml):
    """Retrieve the raw set of operations from the request XML.

    Args:
      raw_request_xml: The full XML for the desired operation, as generated by
        suds.

    Returns:
      An unmodified mutate Element containing the operations from the raw
      request xml.

    Raises:
      AttributeError: if the provided XML isn't from AdWords.
    """
    root = ElementTree.fromstring(raw_request_xml)
    return root.find('{http://schemas.xmlsoap.org/soap/envelope/}Body').find(
        '%smutate' % self._ADWORDS_NAMESPACE)


class BatchJobServiceIdGenerator(object):
  """Utility for generating IDs used by the BatchJobService.

  This produces sequential negative IDs used by the BatchJobService as temporary
  IDs for resources created while the jobs execute. These can be used across
  operations for cases where the ID of one resource a is a dependency of
  another resource.
  """

  def __init__(self):
    """Initializes the BatchJobServiceIdGenerator."""
    self.i = 0

  def GetId(self):
    """Produces a distinct sequential Id for the BatchJobService.

    Returns:
      A negative number that will be the temporary Id for an API resource.
    """
    self.i -= 1
    return self.i
